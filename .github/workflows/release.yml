# The way this works is the following:
#
# The create-release job runs purely to initialize the GitHub release itself
# and to output upload_url for the following job.
#
# The build-release job runs only once create-release is finished. It gets the
# release upload URL from create-release job outputs, then builds the release
# executables for each supported platform and attaches them as release assets
# to the previously created release.
#
# The key here is that we create the release only once.
#
# Reference:
# https://eugene-babichenko.github.io/blog/2020/05/09/github-actions-cross-platform-auto-releases/

name: Github Release
on:
  push:
    # Enable when testing release infrastructure on a branch.
    branches:
      - develop
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"
jobs:
  create-release:
    name: create-release
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    # env:
    #   # Set to force version number, e.g., when no tag exists.
    #   RG_VERSION: TEST-0.0.0
    outputs:
      upload_url: ${{ steps.release.outputs.upload_url }}
      rg_version: ${{ env.RG_VERSION }}
    steps:
      - name: Get the release version from the tag
        shell: bash
        if: env.RG_VERSION == ''
        run: |
          # Apparently, this is the right way to get a tag name. Really?
          #
          # See: https://github.community/t5/GitHub-Actions/How-to-get-just-the-tag-name/m-p/32167/highlight/true#M1027
          echo "RG_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          echo "version is: ${{ env.RG_VERSION }}"
      - name: Create GitHub release
        id: release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.RG_VERSION }}
          release_name: ${{ env.RG_VERSION }}

  build-release:
    name: build-release
    needs: ["create-release"]
    if: ${{ always() }}
    runs-on: ${{ matrix.os }}
    env:
      # For some builds, we use cross to test on 32-bit and big-endian
      # systems.
      CARGO: cargo
      # When CARGO is set to CROSS, this is set to `--target matrix.target`.
      TARGET_FLAGS: ""
      # When CARGO is set to CROSS, TARGET_DIR includes matrix.target.
      TARGET_DIR: ./target
      # Emit backtraces on panics.
      RUST_BACKTRACE: 1
      BINARY: "orly"
      MACOSX_DEPLOYMENT_TARGET: "10.7"
      MACOSX_LIBXML_VER: "2.9.13"
      PKG_CONFIG_ALL_STATIC: "true"
    strategy:
      matrix:
        build: [macos, win-msvc]
        include:
          # - build: linux-arm
          #   os: ubuntu-18.04
          #   rust: nightly
          #   target: arm-unknown-linux-gnueabihf
          # - build: win32-msvc
          #   os: windows-2019
          #   rust: nightly
          #   target: i686-pc-windows-msvc
          - build: macos
            os: macos-latest
            rust: stable
            target: x86_64-apple-darwin
          - build: win-msvc
            os: windows-2019
            rust: stable
            target: x86_64-pc-windows-msvc

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          # Todo: find a way to link with icu
          # Since version 2.9.14 brew ships libxml2 with icu support which I wasn't able
          # to make to link correctly
          # https://github.com/Homebrew/homebrew-core/commit/51f729ec63ff8963a300f2e779e51f3a1706cbd0
          brew extract --version=$MACOSX_LIBXML_VER libxml2 homebrew/cask
          brew install libxml2@$MACOSX_LIBXML_VER zlib

          # pkg-config-rs hack to force static linking for zlib
          ln -s $(brew --prefix)/opt/zlib/include/zlib.h $(brew --prefix)/opt/libxml2@$MACOSX_LIBXML_VER/include/zlib.h
          ln -s $(brew --prefix)/opt/zlib/lib/libz.a $(brew --prefix)/opt/libxml2@$MACOSX_LIBXML_VER/lib/libz.a

      - name: Restore from cache and install vcpkg (Windows x64)
        if: matrix.os == 'windows-2019'
        uses: lukka/run-vcpkg@v10
        with:
          vcpkgGitCommitId: "cef0b3ec767df6e83806899fe9525f6cf8d7bc91"

      - name: Install dependencies (Windows x64)
        shell: bash
        if: matrix.os == 'windows-2019'
        run: |
          # Using static libxml version along with "crt-static" rustflags 
          # in .cargo/config/toml allows building static binaries
          $VCPKG_ROOT/vcpkg install libxml2:x64-windows-static

      - name: Install Rust
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}

      - name: Use Cross
        shell: bash
        run: |
          cargo install cross
          echo "CARGO=cross" >> $GITHUB_ENV
          echo "TARGET_FLAGS=--target ${{ matrix.target }}" >> $GITHUB_ENV
          echo "TARGET_DIR=./target/${{ matrix.target }}" >> $GITHUB_ENV

      - name: Show command used for Cargo
        run: |
          echo "cargo command is: ${{ env.CARGO }}"
          echo "target flag is: ${{ env.TARGET_FLAGS }}"
          echo "target dir is: ${{ env.TARGET_DIR }}"

      - name: Build release binary
        shell: bash
        run: |
          # Required for windows builds
          export PATH=$PATH:${{env.VCPKG_ROOT}}
          export PKG_CONFIG_PATH=/usr/local/opt/libxml2@$MACOSX_LIBXML_VER/lib/pkgconfig
          echo "PKG_CONFIG_PATH=$PKG_CONFIG_PATH"
          ${{ env.CARGO }} build ${{ env.TARGET_FLAGS }} --release --locked

      - name: Build archive
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        shell: bash
        run: |
          staging="$BINARY-${{ needs.create-release.outputs.rg_version }}-${{ matrix.target }}"

          if [ "${{ matrix.os }}" = "macos-latest" ]; then
            otool -L "target/${{ matrix.target }}/release/$BINARY"
          fi

          if [ "${{ matrix.os }}" = "windows-2019" ]; then
            cp "target/${{ matrix.target }}/release/$BINARY.exe" "$BINARY.exe"
            7z a "$staging.zip" "$BINARY.exe"
            echo "ASSET=$staging.zip" >> $GITHUB_ENV
          else
            cp "target/${{ matrix.target }}/release/$BINARY" "$BINARY"
            tar -czvf "$staging.tar.gz" "$BINARY"
            echo "ASSET=$staging.tar.gz" >> $GITHUB_ENV
          fi

      - name: Upload release archive
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ env.ASSET }}
          asset_name: ${{ env.ASSET }}
          asset_content_type: application/octet-stream
  # Building musl version requires all dependencies to be built with musl too.
  # There are some issues when building musl version of libxml with cross
  # (specifically with openssl). clux/muslrust has musl-compiled version of openssl
  # which solves the issue

  build-release-musl:
    if: ${{ always() }}
    needs: ["create-release"]
    runs-on: ubuntu-latest
    container: clux/muslrust:stable
    env:
      LIBXML_VER: "2.9.14"
      BINARY: "orly"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Link to predefined musl toolchain
        run: |
          ln -s /root/.cargo $HOME/.cargo
          ln -s /root/.rustup $HOME/.rustup

      - name: Compile libxml2 against musl
        run: |
          curl -sSL https://download.gnome.org/sources/libxml2/2.9/libxml2-$LIBXML_VER.tar.xz | tar xJ
          cd libxml2-$LIBXML_VER
          PREFIX=/musl CC="musl-gcc -fPIC -pie" LDFLAGS="-L$PREFIX/lib" CFLAGS="-I$PREFIX/include" \
            ./configure --with-lzma=no --prefix=$PREFIX --host=x86_64-unknown-linux-musl
          make -j$(nproc)
          make install

      - name: Build release binary
        run: |
          cargo build --release --locked

      - name: Build archive
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        shell: bash
        run: |
          ARCHIVE="$BINARY-${{ needs.create-release.outputs.rg_version }}-x86_64-unknown-linux-musl.tar.gz"
          cp "target/x86_64-unknown-linux-musl/release/$BINARY" "$BINARY"
          ldd "$BINARY"
          tar -czvf "$ARCHIVE" "$BINARY"
          echo "ASSET=$ARCHIVE" >> $GITHUB_ENV

      - name: Upload release archive
        uses: actions/upload-release-asset@v1.0.1
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ env.ASSET }}
          asset_name: ${{ env.ASSET }}
          asset_content_type: application/octet-stream

  publish-crate:
    name: publish-crate
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    needs: ["build-release", "build-release-musl"]
    steps:
      - uses: actions/checkout@v1
      - run: cargo login ${CRATES_IO_TOKEN}
        env:
          CRATES_IO_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}
      - run: cargo publish
